// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto;
namespace Packet {
class C_CHAT;
struct C_CHATDefaultTypeInternal;
extern C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
class C_CREATE_ROOM;
struct C_CREATE_ROOMDefaultTypeInternal;
extern C_CREATE_ROOMDefaultTypeInternal _C_CREATE_ROOM_default_instance_;
class C_ENTER_ROOM;
struct C_ENTER_ROOMDefaultTypeInternal;
extern C_ENTER_ROOMDefaultTypeInternal _C_ENTER_ROOM_default_instance_;
class S_CHAT;
struct S_CHATDefaultTypeInternal;
extern S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
class S_CREATE_ROOM;
struct S_CREATE_ROOMDefaultTypeInternal;
extern S_CREATE_ROOMDefaultTypeInternal _S_CREATE_ROOM_default_instance_;
class S_ENTER_ROOM;
struct S_ENTER_ROOMDefaultTypeInternal;
extern S_ENTER_ROOMDefaultTypeInternal _S_ENTER_ROOM_default_instance_;
}  // namespace Packet
PROTOBUF_NAMESPACE_OPEN
template<> ::Packet::C_CHAT* Arena::CreateMaybeMessage<::Packet::C_CHAT>(Arena*);
template<> ::Packet::C_CREATE_ROOM* Arena::CreateMaybeMessage<::Packet::C_CREATE_ROOM>(Arena*);
template<> ::Packet::C_ENTER_ROOM* Arena::CreateMaybeMessage<::Packet::C_ENTER_ROOM>(Arena*);
template<> ::Packet::S_CHAT* Arena::CreateMaybeMessage<::Packet::S_CHAT>(Arena*);
template<> ::Packet::S_CREATE_ROOM* Arena::CreateMaybeMessage<::Packet::S_CREATE_ROOM>(Arena*);
template<> ::Packet::S_ENTER_ROOM* Arena::CreateMaybeMessage<::Packet::S_ENTER_ROOM>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Packet {

enum C_CREATE_ROOM_FAIL_TYPE : int {
  C_CREATE_ROOM_FAIL_TYPE_UNSPEC = 0,
  C_CREATE_ROOM_FAIL_TYPE_ASYNC = 1,
  C_CREATE_ROOM_FAIL_TYPE_EXIST = 2,
  C_CREATE_ROOM_FAIL_TYPE_C_CREATE_ROOM_FAIL_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  C_CREATE_ROOM_FAIL_TYPE_C_CREATE_ROOM_FAIL_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool C_CREATE_ROOM_FAIL_TYPE_IsValid(int value);
constexpr C_CREATE_ROOM_FAIL_TYPE C_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_MIN = C_CREATE_ROOM_FAIL_TYPE_UNSPEC;
constexpr C_CREATE_ROOM_FAIL_TYPE C_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_MAX = C_CREATE_ROOM_FAIL_TYPE_EXIST;
constexpr int C_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_ARRAYSIZE = C_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* C_CREATE_ROOM_FAIL_TYPE_descriptor();
template<typename T>
inline const std::string& C_CREATE_ROOM_FAIL_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, C_CREATE_ROOM_FAIL_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function C_CREATE_ROOM_FAIL_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    C_CREATE_ROOM_FAIL_TYPE_descriptor(), enum_t_value);
}
inline bool C_CREATE_ROOM_FAIL_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, C_CREATE_ROOM_FAIL_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<C_CREATE_ROOM_FAIL_TYPE>(
    C_CREATE_ROOM_FAIL_TYPE_descriptor(), name, value);
}
enum S_CREATE_ROOM_FAIL_TYPE : int {
  S_CREATE_ROOM_FAIL_TYPE_UNSPEC = 0,
  S_CREATE_ROOM_FAIL_TYPE_ASYNC = 1,
  S_CREATE_ROOM_FAIL_TYPE_EXIST = 2,
  S_CREATE_ROOM_FAIL_TYPE_S_CREATE_ROOM_FAIL_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  S_CREATE_ROOM_FAIL_TYPE_S_CREATE_ROOM_FAIL_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool S_CREATE_ROOM_FAIL_TYPE_IsValid(int value);
constexpr S_CREATE_ROOM_FAIL_TYPE S_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_MIN = S_CREATE_ROOM_FAIL_TYPE_UNSPEC;
constexpr S_CREATE_ROOM_FAIL_TYPE S_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_MAX = S_CREATE_ROOM_FAIL_TYPE_EXIST;
constexpr int S_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_ARRAYSIZE = S_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* S_CREATE_ROOM_FAIL_TYPE_descriptor();
template<typename T>
inline const std::string& S_CREATE_ROOM_FAIL_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, S_CREATE_ROOM_FAIL_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function S_CREATE_ROOM_FAIL_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    S_CREATE_ROOM_FAIL_TYPE_descriptor(), enum_t_value);
}
inline bool S_CREATE_ROOM_FAIL_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, S_CREATE_ROOM_FAIL_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<S_CREATE_ROOM_FAIL_TYPE>(
    S_CREATE_ROOM_FAIL_TYPE_descriptor(), name, value);
}
enum C_ENTER_ROOM_FAIL_TYPE : int {
  C_ENTER_ROOM_FAIL_TYPE_UNSPEC = 0,
  C_ENTER_ROOM_FAIL_TYPE_ASYNC = 1,
  C_ENTER_ROOM_FAIL_TYPE_NOT_EXIST = 2,
  C_ENTER_ROOM_FAIL_TYPE_C_ENTER_ROOM_FAIL_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  C_ENTER_ROOM_FAIL_TYPE_C_ENTER_ROOM_FAIL_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool C_ENTER_ROOM_FAIL_TYPE_IsValid(int value);
constexpr C_ENTER_ROOM_FAIL_TYPE C_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_MIN = C_ENTER_ROOM_FAIL_TYPE_UNSPEC;
constexpr C_ENTER_ROOM_FAIL_TYPE C_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_MAX = C_ENTER_ROOM_FAIL_TYPE_NOT_EXIST;
constexpr int C_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_ARRAYSIZE = C_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* C_ENTER_ROOM_FAIL_TYPE_descriptor();
template<typename T>
inline const std::string& C_ENTER_ROOM_FAIL_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, C_ENTER_ROOM_FAIL_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function C_ENTER_ROOM_FAIL_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    C_ENTER_ROOM_FAIL_TYPE_descriptor(), enum_t_value);
}
inline bool C_ENTER_ROOM_FAIL_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, C_ENTER_ROOM_FAIL_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<C_ENTER_ROOM_FAIL_TYPE>(
    C_ENTER_ROOM_FAIL_TYPE_descriptor(), name, value);
}
enum S_ENTER_ROOM_FAIL_TYPE : int {
  S_ENTER_ROOM_FAIL_TYPE_UNSPEC = 0,
  S_ENTER_ROOM_FAIL_TYPE_ASYNC = 1,
  S_ENTER_ROOM_FAIL_TYPE_NOT_EXIST = 2,
  S_ENTER_ROOM_FAIL_TYPE_S_ENTER_ROOM_FAIL_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  S_ENTER_ROOM_FAIL_TYPE_S_ENTER_ROOM_FAIL_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool S_ENTER_ROOM_FAIL_TYPE_IsValid(int value);
constexpr S_ENTER_ROOM_FAIL_TYPE S_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_MIN = S_ENTER_ROOM_FAIL_TYPE_UNSPEC;
constexpr S_ENTER_ROOM_FAIL_TYPE S_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_MAX = S_ENTER_ROOM_FAIL_TYPE_NOT_EXIST;
constexpr int S_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_ARRAYSIZE = S_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* S_ENTER_ROOM_FAIL_TYPE_descriptor();
template<typename T>
inline const std::string& S_ENTER_ROOM_FAIL_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, S_ENTER_ROOM_FAIL_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function S_ENTER_ROOM_FAIL_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    S_ENTER_ROOM_FAIL_TYPE_descriptor(), enum_t_value);
}
inline bool S_ENTER_ROOM_FAIL_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, S_ENTER_ROOM_FAIL_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<S_ENTER_ROOM_FAIL_TYPE>(
    S_ENTER_ROOM_FAIL_TYPE_descriptor(), name, value);
}
// ===================================================================

class C_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packet.C_CREATE_ROOM) */ {
 public:
  inline C_CREATE_ROOM() : C_CREATE_ROOM(nullptr) {}
  ~C_CREATE_ROOM() override;
  explicit PROTOBUF_CONSTEXPR C_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CREATE_ROOM(const C_CREATE_ROOM& from);
  C_CREATE_ROOM(C_CREATE_ROOM&& from) noexcept
    : C_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline C_CREATE_ROOM& operator=(const C_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CREATE_ROOM& operator=(C_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_CREATE_ROOM*>(
               &_C_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_CREATE_ROOM& a, C_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CREATE_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CREATE_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CREATE_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_CREATE_ROOM& from) {
    C_CREATE_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CREATE_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packet.C_CREATE_ROOM";
  }
  protected:
  explicit C_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef C_CREATE_ROOM_FAIL_TYPE FAIL_TYPE;
  static constexpr FAIL_TYPE UNSPEC =
    C_CREATE_ROOM_FAIL_TYPE_UNSPEC;
  static constexpr FAIL_TYPE ASYNC =
    C_CREATE_ROOM_FAIL_TYPE_ASYNC;
  static constexpr FAIL_TYPE EXIST =
    C_CREATE_ROOM_FAIL_TYPE_EXIST;
  static inline bool FAIL_TYPE_IsValid(int value) {
    return C_CREATE_ROOM_FAIL_TYPE_IsValid(value);
  }
  static constexpr FAIL_TYPE FAIL_TYPE_MIN =
    C_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_MIN;
  static constexpr FAIL_TYPE FAIL_TYPE_MAX =
    C_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_MAX;
  static constexpr int FAIL_TYPE_ARRAYSIZE =
    C_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FAIL_TYPE_descriptor() {
    return C_CREATE_ROOM_FAIL_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& FAIL_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FAIL_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FAIL_TYPE_Name.");
    return C_CREATE_ROOM_FAIL_TYPE_Name(enum_t_value);
  }
  static inline bool FAIL_TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FAIL_TYPE* value) {
    return C_CREATE_ROOM_FAIL_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
    kCauseFailFieldNumber = 2,
    kAsyncCompletionFieldNumber = 3,
  };
  // string room_name = 1;
  void clear_room_name();
  const std::string& room_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* room_name);
  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(const std::string& value);
  std::string* _internal_mutable_room_name();
  public:

  // optional .Packet.C_CREATE_ROOM.FAIL_TYPE cause_fail = 2;
  bool has_cause_fail() const;
  private:
  bool _internal_has_cause_fail() const;
  public:
  void clear_cause_fail();
  ::Packet::C_CREATE_ROOM_FAIL_TYPE cause_fail() const;
  void set_cause_fail(::Packet::C_CREATE_ROOM_FAIL_TYPE value);
  private:
  ::Packet::C_CREATE_ROOM_FAIL_TYPE _internal_cause_fail() const;
  void _internal_set_cause_fail(::Packet::C_CREATE_ROOM_FAIL_TYPE value);
  public:

  // optional bool async_completion = 3;
  bool has_async_completion() const;
  private:
  bool _internal_has_async_completion() const;
  public:
  void clear_async_completion();
  bool async_completion() const;
  void set_async_completion(bool value);
  private:
  bool _internal_async_completion() const;
  void _internal_set_async_completion(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Packet.C_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
    int cause_fail_;
    bool async_completion_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packet.S_CREATE_ROOM) */ {
 public:
  inline S_CREATE_ROOM() : S_CREATE_ROOM(nullptr) {}
  ~S_CREATE_ROOM() override;
  explicit PROTOBUF_CONSTEXPR S_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CREATE_ROOM(const S_CREATE_ROOM& from);
  S_CREATE_ROOM(S_CREATE_ROOM&& from) noexcept
    : S_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline S_CREATE_ROOM& operator=(const S_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CREATE_ROOM& operator=(S_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_CREATE_ROOM*>(
               &_S_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_CREATE_ROOM& a, S_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CREATE_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CREATE_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CREATE_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_CREATE_ROOM& from) {
    S_CREATE_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CREATE_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packet.S_CREATE_ROOM";
  }
  protected:
  explicit S_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef S_CREATE_ROOM_FAIL_TYPE FAIL_TYPE;
  static constexpr FAIL_TYPE UNSPEC =
    S_CREATE_ROOM_FAIL_TYPE_UNSPEC;
  static constexpr FAIL_TYPE ASYNC =
    S_CREATE_ROOM_FAIL_TYPE_ASYNC;
  static constexpr FAIL_TYPE EXIST =
    S_CREATE_ROOM_FAIL_TYPE_EXIST;
  static inline bool FAIL_TYPE_IsValid(int value) {
    return S_CREATE_ROOM_FAIL_TYPE_IsValid(value);
  }
  static constexpr FAIL_TYPE FAIL_TYPE_MIN =
    S_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_MIN;
  static constexpr FAIL_TYPE FAIL_TYPE_MAX =
    S_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_MAX;
  static constexpr int FAIL_TYPE_ARRAYSIZE =
    S_CREATE_ROOM_FAIL_TYPE_FAIL_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FAIL_TYPE_descriptor() {
    return S_CREATE_ROOM_FAIL_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& FAIL_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FAIL_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FAIL_TYPE_Name.");
    return S_CREATE_ROOM_FAIL_TYPE_Name(enum_t_value);
  }
  static inline bool FAIL_TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FAIL_TYPE* value) {
    return S_CREATE_ROOM_FAIL_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kCauseFailFieldNumber = 2,
  };
  // int32 room_id = 1;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // optional .Packet.S_CREATE_ROOM.FAIL_TYPE cause_fail = 2;
  bool has_cause_fail() const;
  private:
  bool _internal_has_cause_fail() const;
  public:
  void clear_cause_fail();
  ::Packet::S_CREATE_ROOM_FAIL_TYPE cause_fail() const;
  void set_cause_fail(::Packet::S_CREATE_ROOM_FAIL_TYPE value);
  private:
  ::Packet::S_CREATE_ROOM_FAIL_TYPE _internal_cause_fail() const;
  void _internal_set_cause_fail(::Packet::S_CREATE_ROOM_FAIL_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:Packet.S_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t room_id_;
    int cause_fail_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class C_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packet.C_ENTER_ROOM) */ {
 public:
  inline C_ENTER_ROOM() : C_ENTER_ROOM(nullptr) {}
  ~C_ENTER_ROOM() override;
  explicit PROTOBUF_CONSTEXPR C_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ENTER_ROOM(const C_ENTER_ROOM& from);
  C_ENTER_ROOM(C_ENTER_ROOM&& from) noexcept
    : C_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline C_ENTER_ROOM& operator=(const C_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ENTER_ROOM& operator=(C_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_ENTER_ROOM*>(
               &_C_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_ENTER_ROOM& a, C_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ENTER_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ENTER_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ENTER_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ENTER_ROOM& from) {
    C_ENTER_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ENTER_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packet.C_ENTER_ROOM";
  }
  protected:
  explicit C_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef C_ENTER_ROOM_FAIL_TYPE FAIL_TYPE;
  static constexpr FAIL_TYPE UNSPEC =
    C_ENTER_ROOM_FAIL_TYPE_UNSPEC;
  static constexpr FAIL_TYPE ASYNC =
    C_ENTER_ROOM_FAIL_TYPE_ASYNC;
  static constexpr FAIL_TYPE NOT_EXIST =
    C_ENTER_ROOM_FAIL_TYPE_NOT_EXIST;
  static inline bool FAIL_TYPE_IsValid(int value) {
    return C_ENTER_ROOM_FAIL_TYPE_IsValid(value);
  }
  static constexpr FAIL_TYPE FAIL_TYPE_MIN =
    C_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_MIN;
  static constexpr FAIL_TYPE FAIL_TYPE_MAX =
    C_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_MAX;
  static constexpr int FAIL_TYPE_ARRAYSIZE =
    C_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FAIL_TYPE_descriptor() {
    return C_ENTER_ROOM_FAIL_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& FAIL_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FAIL_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FAIL_TYPE_Name.");
    return C_ENTER_ROOM_FAIL_TYPE_Name(enum_t_value);
  }
  static inline bool FAIL_TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FAIL_TYPE* value) {
    return C_ENTER_ROOM_FAIL_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kCauseFailFieldNumber = 2,
    kAsyncCompletionFieldNumber = 3,
  };
  // int32 room_id = 1;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // optional .Packet.C_ENTER_ROOM.FAIL_TYPE cause_fail = 2;
  bool has_cause_fail() const;
  private:
  bool _internal_has_cause_fail() const;
  public:
  void clear_cause_fail();
  ::Packet::C_ENTER_ROOM_FAIL_TYPE cause_fail() const;
  void set_cause_fail(::Packet::C_ENTER_ROOM_FAIL_TYPE value);
  private:
  ::Packet::C_ENTER_ROOM_FAIL_TYPE _internal_cause_fail() const;
  void _internal_set_cause_fail(::Packet::C_ENTER_ROOM_FAIL_TYPE value);
  public:

  // optional bool async_completion = 3;
  bool has_async_completion() const;
  private:
  bool _internal_has_async_completion() const;
  public:
  void clear_async_completion();
  bool async_completion() const;
  void set_async_completion(bool value);
  private:
  bool _internal_async_completion() const;
  void _internal_set_async_completion(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Packet.C_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t room_id_;
    int cause_fail_;
    bool async_completion_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packet.S_ENTER_ROOM) */ {
 public:
  inline S_ENTER_ROOM() : S_ENTER_ROOM(nullptr) {}
  ~S_ENTER_ROOM() override;
  explicit PROTOBUF_CONSTEXPR S_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENTER_ROOM(const S_ENTER_ROOM& from);
  S_ENTER_ROOM(S_ENTER_ROOM&& from) noexcept
    : S_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline S_ENTER_ROOM& operator=(const S_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_ROOM& operator=(S_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_ROOM*>(
               &_S_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_ENTER_ROOM& a, S_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ENTER_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ENTER_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ENTER_ROOM& from) {
    S_ENTER_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENTER_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packet.S_ENTER_ROOM";
  }
  protected:
  explicit S_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef S_ENTER_ROOM_FAIL_TYPE FAIL_TYPE;
  static constexpr FAIL_TYPE UNSPEC =
    S_ENTER_ROOM_FAIL_TYPE_UNSPEC;
  static constexpr FAIL_TYPE ASYNC =
    S_ENTER_ROOM_FAIL_TYPE_ASYNC;
  static constexpr FAIL_TYPE NOT_EXIST =
    S_ENTER_ROOM_FAIL_TYPE_NOT_EXIST;
  static inline bool FAIL_TYPE_IsValid(int value) {
    return S_ENTER_ROOM_FAIL_TYPE_IsValid(value);
  }
  static constexpr FAIL_TYPE FAIL_TYPE_MIN =
    S_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_MIN;
  static constexpr FAIL_TYPE FAIL_TYPE_MAX =
    S_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_MAX;
  static constexpr int FAIL_TYPE_ARRAYSIZE =
    S_ENTER_ROOM_FAIL_TYPE_FAIL_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FAIL_TYPE_descriptor() {
    return S_ENTER_ROOM_FAIL_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& FAIL_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FAIL_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FAIL_TYPE_Name.");
    return S_ENTER_ROOM_FAIL_TYPE_Name(enum_t_value);
  }
  static inline bool FAIL_TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FAIL_TYPE* value) {
    return S_ENTER_ROOM_FAIL_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kCauseFailFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // optional .Packet.S_ENTER_ROOM.FAIL_TYPE cause_fail = 2;
  bool has_cause_fail() const;
  private:
  bool _internal_has_cause_fail() const;
  public:
  void clear_cause_fail();
  ::Packet::S_ENTER_ROOM_FAIL_TYPE cause_fail() const;
  void set_cause_fail(::Packet::S_ENTER_ROOM_FAIL_TYPE value);
  private:
  ::Packet::S_ENTER_ROOM_FAIL_TYPE _internal_cause_fail() const;
  void _internal_set_cause_fail(::Packet::S_ENTER_ROOM_FAIL_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:Packet.S_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t user_id_;
    int cause_fail_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class C_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packet.C_CHAT) */ {
 public:
  inline C_CHAT() : C_CHAT(nullptr) {}
  ~C_CHAT() override;
  explicit PROTOBUF_CONSTEXPR C_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHAT(const C_CHAT& from);
  C_CHAT(C_CHAT&& from) noexcept
    : C_CHAT() {
    *this = ::std::move(from);
  }

  inline C_CHAT& operator=(const C_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHAT& operator=(C_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_CHAT*>(
               &_C_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_CHAT& a, C_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_CHAT& from) {
    C_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packet.C_CHAT";
  }
  protected:
  explicit C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Packet.C_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packet.S_CHAT) */ {
 public:
  inline S_CHAT() : S_CHAT(nullptr) {}
  ~S_CHAT() override;
  explicit PROTOBUF_CONSTEXPR S_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHAT(const S_CHAT& from);
  S_CHAT(S_CHAT&& from) noexcept
    : S_CHAT() {
    *this = ::std::move(from);
  }

  inline S_CHAT& operator=(const S_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT& operator=(S_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_CHAT*>(
               &_S_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_CHAT& a, S_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_CHAT& from) {
    S_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packet.S_CHAT";
  }
  protected:
  explicit S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Packet.S_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_CREATE_ROOM

// string room_name = 1;
inline void C_CREATE_ROOM::clear_room_name() {
  _impl_.room_name_.ClearToEmpty();
}
inline const std::string& C_CREATE_ROOM::room_name() const {
  // @@protoc_insertion_point(field_get:Packet.C_CREATE_ROOM.room_name)
  return _internal_room_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CREATE_ROOM::set_room_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Packet.C_CREATE_ROOM.room_name)
}
inline std::string* C_CREATE_ROOM::mutable_room_name() {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:Packet.C_CREATE_ROOM.room_name)
  return _s;
}
inline const std::string& C_CREATE_ROOM::_internal_room_name() const {
  return _impl_.room_name_.Get();
}
inline void C_CREATE_ROOM::_internal_set_room_name(const std::string& value) {
  
  _impl_.room_name_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CREATE_ROOM::_internal_mutable_room_name() {
  
  return _impl_.room_name_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CREATE_ROOM::release_room_name() {
  // @@protoc_insertion_point(field_release:Packet.C_CREATE_ROOM.room_name)
  return _impl_.room_name_.Release();
}
inline void C_CREATE_ROOM::set_allocated_room_name(std::string* room_name) {
  if (room_name != nullptr) {
    
  } else {
    
  }
  _impl_.room_name_.SetAllocated(room_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_name_.IsDefault()) {
    _impl_.room_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Packet.C_CREATE_ROOM.room_name)
}

// optional .Packet.C_CREATE_ROOM.FAIL_TYPE cause_fail = 2;
inline bool C_CREATE_ROOM::_internal_has_cause_fail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool C_CREATE_ROOM::has_cause_fail() const {
  return _internal_has_cause_fail();
}
inline void C_CREATE_ROOM::clear_cause_fail() {
  _impl_.cause_fail_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Packet::C_CREATE_ROOM_FAIL_TYPE C_CREATE_ROOM::_internal_cause_fail() const {
  return static_cast< ::Packet::C_CREATE_ROOM_FAIL_TYPE >(_impl_.cause_fail_);
}
inline ::Packet::C_CREATE_ROOM_FAIL_TYPE C_CREATE_ROOM::cause_fail() const {
  // @@protoc_insertion_point(field_get:Packet.C_CREATE_ROOM.cause_fail)
  return _internal_cause_fail();
}
inline void C_CREATE_ROOM::_internal_set_cause_fail(::Packet::C_CREATE_ROOM_FAIL_TYPE value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cause_fail_ = value;
}
inline void C_CREATE_ROOM::set_cause_fail(::Packet::C_CREATE_ROOM_FAIL_TYPE value) {
  _internal_set_cause_fail(value);
  // @@protoc_insertion_point(field_set:Packet.C_CREATE_ROOM.cause_fail)
}

// optional bool async_completion = 3;
inline bool C_CREATE_ROOM::_internal_has_async_completion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool C_CREATE_ROOM::has_async_completion() const {
  return _internal_has_async_completion();
}
inline void C_CREATE_ROOM::clear_async_completion() {
  _impl_.async_completion_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool C_CREATE_ROOM::_internal_async_completion() const {
  return _impl_.async_completion_;
}
inline bool C_CREATE_ROOM::async_completion() const {
  // @@protoc_insertion_point(field_get:Packet.C_CREATE_ROOM.async_completion)
  return _internal_async_completion();
}
inline void C_CREATE_ROOM::_internal_set_async_completion(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.async_completion_ = value;
}
inline void C_CREATE_ROOM::set_async_completion(bool value) {
  _internal_set_async_completion(value);
  // @@protoc_insertion_point(field_set:Packet.C_CREATE_ROOM.async_completion)
}

// -------------------------------------------------------------------

// S_CREATE_ROOM

// int32 room_id = 1;
inline void S_CREATE_ROOM::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t S_CREATE_ROOM::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t S_CREATE_ROOM::room_id() const {
  // @@protoc_insertion_point(field_get:Packet.S_CREATE_ROOM.room_id)
  return _internal_room_id();
}
inline void S_CREATE_ROOM::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void S_CREATE_ROOM::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:Packet.S_CREATE_ROOM.room_id)
}

// optional .Packet.S_CREATE_ROOM.FAIL_TYPE cause_fail = 2;
inline bool S_CREATE_ROOM::_internal_has_cause_fail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool S_CREATE_ROOM::has_cause_fail() const {
  return _internal_has_cause_fail();
}
inline void S_CREATE_ROOM::clear_cause_fail() {
  _impl_.cause_fail_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Packet::S_CREATE_ROOM_FAIL_TYPE S_CREATE_ROOM::_internal_cause_fail() const {
  return static_cast< ::Packet::S_CREATE_ROOM_FAIL_TYPE >(_impl_.cause_fail_);
}
inline ::Packet::S_CREATE_ROOM_FAIL_TYPE S_CREATE_ROOM::cause_fail() const {
  // @@protoc_insertion_point(field_get:Packet.S_CREATE_ROOM.cause_fail)
  return _internal_cause_fail();
}
inline void S_CREATE_ROOM::_internal_set_cause_fail(::Packet::S_CREATE_ROOM_FAIL_TYPE value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cause_fail_ = value;
}
inline void S_CREATE_ROOM::set_cause_fail(::Packet::S_CREATE_ROOM_FAIL_TYPE value) {
  _internal_set_cause_fail(value);
  // @@protoc_insertion_point(field_set:Packet.S_CREATE_ROOM.cause_fail)
}

// -------------------------------------------------------------------

// C_ENTER_ROOM

// int32 room_id = 1;
inline void C_ENTER_ROOM::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t C_ENTER_ROOM::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t C_ENTER_ROOM::room_id() const {
  // @@protoc_insertion_point(field_get:Packet.C_ENTER_ROOM.room_id)
  return _internal_room_id();
}
inline void C_ENTER_ROOM::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void C_ENTER_ROOM::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:Packet.C_ENTER_ROOM.room_id)
}

// optional .Packet.C_ENTER_ROOM.FAIL_TYPE cause_fail = 2;
inline bool C_ENTER_ROOM::_internal_has_cause_fail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool C_ENTER_ROOM::has_cause_fail() const {
  return _internal_has_cause_fail();
}
inline void C_ENTER_ROOM::clear_cause_fail() {
  _impl_.cause_fail_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Packet::C_ENTER_ROOM_FAIL_TYPE C_ENTER_ROOM::_internal_cause_fail() const {
  return static_cast< ::Packet::C_ENTER_ROOM_FAIL_TYPE >(_impl_.cause_fail_);
}
inline ::Packet::C_ENTER_ROOM_FAIL_TYPE C_ENTER_ROOM::cause_fail() const {
  // @@protoc_insertion_point(field_get:Packet.C_ENTER_ROOM.cause_fail)
  return _internal_cause_fail();
}
inline void C_ENTER_ROOM::_internal_set_cause_fail(::Packet::C_ENTER_ROOM_FAIL_TYPE value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cause_fail_ = value;
}
inline void C_ENTER_ROOM::set_cause_fail(::Packet::C_ENTER_ROOM_FAIL_TYPE value) {
  _internal_set_cause_fail(value);
  // @@protoc_insertion_point(field_set:Packet.C_ENTER_ROOM.cause_fail)
}

// optional bool async_completion = 3;
inline bool C_ENTER_ROOM::_internal_has_async_completion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool C_ENTER_ROOM::has_async_completion() const {
  return _internal_has_async_completion();
}
inline void C_ENTER_ROOM::clear_async_completion() {
  _impl_.async_completion_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool C_ENTER_ROOM::_internal_async_completion() const {
  return _impl_.async_completion_;
}
inline bool C_ENTER_ROOM::async_completion() const {
  // @@protoc_insertion_point(field_get:Packet.C_ENTER_ROOM.async_completion)
  return _internal_async_completion();
}
inline void C_ENTER_ROOM::_internal_set_async_completion(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.async_completion_ = value;
}
inline void C_ENTER_ROOM::set_async_completion(bool value) {
  _internal_set_async_completion(value);
  // @@protoc_insertion_point(field_set:Packet.C_ENTER_ROOM.async_completion)
}

// -------------------------------------------------------------------

// S_ENTER_ROOM

// int32 user_id = 1;
inline void S_ENTER_ROOM::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t S_ENTER_ROOM::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t S_ENTER_ROOM::user_id() const {
  // @@protoc_insertion_point(field_get:Packet.S_ENTER_ROOM.user_id)
  return _internal_user_id();
}
inline void S_ENTER_ROOM::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void S_ENTER_ROOM::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Packet.S_ENTER_ROOM.user_id)
}

// optional .Packet.S_ENTER_ROOM.FAIL_TYPE cause_fail = 2;
inline bool S_ENTER_ROOM::_internal_has_cause_fail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool S_ENTER_ROOM::has_cause_fail() const {
  return _internal_has_cause_fail();
}
inline void S_ENTER_ROOM::clear_cause_fail() {
  _impl_.cause_fail_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Packet::S_ENTER_ROOM_FAIL_TYPE S_ENTER_ROOM::_internal_cause_fail() const {
  return static_cast< ::Packet::S_ENTER_ROOM_FAIL_TYPE >(_impl_.cause_fail_);
}
inline ::Packet::S_ENTER_ROOM_FAIL_TYPE S_ENTER_ROOM::cause_fail() const {
  // @@protoc_insertion_point(field_get:Packet.S_ENTER_ROOM.cause_fail)
  return _internal_cause_fail();
}
inline void S_ENTER_ROOM::_internal_set_cause_fail(::Packet::S_ENTER_ROOM_FAIL_TYPE value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cause_fail_ = value;
}
inline void S_ENTER_ROOM::set_cause_fail(::Packet::S_ENTER_ROOM_FAIL_TYPE value) {
  _internal_set_cause_fail(value);
  // @@protoc_insertion_point(field_set:Packet.S_ENTER_ROOM.cause_fail)
}

// -------------------------------------------------------------------

// C_CHAT

// string msg = 1;
inline void C_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& C_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Packet.C_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Packet.C_CHAT.msg)
}
inline std::string* C_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Packet.C_CHAT.msg)
  return _s;
}
inline const std::string& C_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void C_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Packet.C_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void C_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Packet.C_CHAT.msg)
}

// -------------------------------------------------------------------

// S_CHAT

// int32 user_id = 1;
inline void S_CHAT::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t S_CHAT::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t S_CHAT::user_id() const {
  // @@protoc_insertion_point(field_get:Packet.S_CHAT.user_id)
  return _internal_user_id();
}
inline void S_CHAT::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void S_CHAT::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Packet.S_CHAT.user_id)
}

// string msg = 2;
inline void S_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& S_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Packet.S_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Packet.S_CHAT.msg)
}
inline std::string* S_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Packet.S_CHAT.msg)
  return _s;
}
inline const std::string& S_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void S_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Packet.S_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void S_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Packet.S_CHAT.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Packet::C_CREATE_ROOM_FAIL_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::C_CREATE_ROOM_FAIL_TYPE>() {
  return ::Packet::C_CREATE_ROOM_FAIL_TYPE_descriptor();
}
template <> struct is_proto_enum< ::Packet::S_CREATE_ROOM_FAIL_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::S_CREATE_ROOM_FAIL_TYPE>() {
  return ::Packet::S_CREATE_ROOM_FAIL_TYPE_descriptor();
}
template <> struct is_proto_enum< ::Packet::C_ENTER_ROOM_FAIL_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::C_ENTER_ROOM_FAIL_TYPE>() {
  return ::Packet::C_ENTER_ROOM_FAIL_TYPE_descriptor();
}
template <> struct is_proto_enum< ::Packet::S_ENTER_ROOM_FAIL_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::S_ENTER_ROOM_FAIL_TYPE>() {
  return ::Packet::S_ENTER_ROOM_FAIL_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
